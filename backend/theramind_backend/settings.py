"""
Django settings for theramind_backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import json
import firebase_admin
from utils.firebase_client import db

# from firebase_admin import credentials
from corsheaders.defaults import default_headers  # Import default_headers here!

from dotenv import load_dotenv


BASE_DIR = Path(__file__).resolve().parent.parent

# Path to ML models directory (outside of settings.py)
ML_MODELS_DIR = os.path.join(BASE_DIR, "ml_models")

# --- Firebase Initialization ---
local_firebase_path = BASE_DIR / "secrets" / "firebase_admin_credentials.json"

# point load_dotenv at your project root .env
load_dotenv(Path(__file__).resolve().parent.parent / ".env")

# --- SECRET KEY & DEBUG (Production Ready) ---
# SECURITY WARNING: keep the secret key used in production secret!
# Use os.getenv to get environment variables. Provide a strong default ONLY for local development.
# On Heroku, set this via `heroku config:set SECRET_KEY='your_super_secret_key'`
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    "django-insecure-your-very-insecure-key-for-local-dev-only-change-this",
)

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG should be False in production. Control it via an environment variable.
# On Heroku, `heroku config:set DEBUG=False`
DEBUG = (
    os.getenv("DEBUG", "False").lower() == "true"
)  # Converts "True" to True, "False" to False

# Heroku provides the PORT environment variable
PORT = os.getenv(
    "PORT", "8000"
)  # Default to 8000 if not set (common for Django dev server)

# --- Firebase Initialization ---
# cred = None

# # Try loading from .env path
# firebase_path = os.getenv("FIREBASE_CRED_PATH")
# if firebase_path and os.path.exists(firebase_path):
#     cred = credentials.Certificate(firebase_path)
#     print(f"Firebase initialized from path: {firebase_path}")

# # Try loading from raw JSON in .env
# elif os.getenv("FIREBASE_CRED_JSON"):
#     try:
#         import json

#         firebase_json = json.loads(os.getenv("FIREBASE_CRED_JSON"))
#         cred = credentials.Certificate(firebase_json)
#         print("Firebase initialized from raw JSON in .env")
#     except Exception as e:
#         print(f"Invalid FIREBASE_CRED_JSON: {e}")

# # Fallback to secrets/firebase_credentials.json
# else:
#     fallback_path = BASE_DIR / "secrets" / "firebase_admin_credentials.json"
#     if fallback_path.exists():
#         cred = credentials.Certificate(str(fallback_path))
#         print(f"Firebase initialized from fallback path: {fallback_path}")
#     else:
#         print("‚ùå Firebase credentials not found in .env or secrets/")

# # Initialize Firebase
# if cred and not firebase_admin._apps:
#     firebase_admin.initialize_app(cred)

# --- ALLOWED_HOSTS (For Production Security) ---
# List of strings representing the host/domain names that this Django site can serve.
# When DEBUG is False, Django will not allow requests with a Host header that does not match these.
# On Heroku, it will be your-app-name.herokuapp.com. You can also add custom domains.
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "theramind.site",
    "api.theramind.site",
]

# Filter out any empty strings that might result from os.getenv if the variable isn't set
ALLOWED_HOSTS = [h for h in ALLOWED_HOSTS if h]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://theramind.site",
    "https://www.theramind.site",
]

# --- Application definition ---
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",  # Added for CORS handling
    "rest_framework",  # Added for Django REST Framework
    "api",  # Your custom API app
]

# --- MIDDLEWARE Configuration ---
# Order matters for middleware!
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # must be first
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "theramind_backend.middleware.EnforceAllowedOriginsMiddleware",  # disable for now
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# --- CORS Headers Configuration ---
# REMOVED: The `add_cors_headers` function from `django.http import JsonResponse`
# and the function itself. This is handled by `django-cors-headers`.


CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# COMBINED and CORRECTED: You had two CORS_ALLOW_HEADERS definitions.
# This one correctly combines the default headers with your custom ones.
CORS_ALLOW_HEADERS = list(default_headers) + [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    # "origin", # default_headers already contains 'origin'
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# --- URL Configuration ---
ROOT_URLCONF = "theramind_backend.urls"

# --- Template Configuration ---
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# --- WSGI Application ---
WSGI_APPLICATION = "theramind_backend.wsgi.application"

# Prevent clickjacking
X_FRAME_OPTIONS = "DENY"

# Stronger frame policy (modern)
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

# Force HTTPS in production
SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Strict HTTPS
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True


# --- Database Configuration ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.dummy"  # Dummy engine as you're using Firestore (NoSQL)
    }
}


# --- Logging Configuration ---
# Add logging to track Firebase operations and general app behavior for debugging purposes
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",  # Set to "DEBUG" for more verbose output during development
    },
    # You can add specific loggers for certain modules if needed, e.g.:
    # 'loggers': {
    #     'firebase_admin': {
    #         'handlers': ['console'],
    #         'level': 'DEBUG',
    #         'propagate': False,
    #     },
    # }
}


# --- Password Validation ---
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# --- Django REST Framework Configuration ---
REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    # Consider adding renderers if you want to explicitly control output format
    # "DEFAULT_RENDERER_CLASSES": [
    #     "rest_framework.renderers.JSONRenderer",
    # ],
    # If you use authentication in your API, configure it here:
    # "DEFAULT_AUTHENTICATION_CLASSES": [
    #     "rest_framework.authentication.TokenAuthentication",
    #     "rest_framework.authentication.SessionAuthentication",
    # ],
    # "DEFAULT_PERMISSION_CLASSES": [
    #     "rest_framework.permissions.IsAuthenticated",
    # ],
}


# --- Internationalization and Time Zone ---
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Karachi"  # Set to your local time zone if needed, otherwise 'UTC' is common for servers
USE_I18N = True
USE_TZ = True  # Enables timezone support in Django

# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = "static/"
# This is the directory where `collectstatic` will gather all static files from your apps
# and other STATICFILES_DIRS. WhiteNoise will then serve from here.
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Configure WhiteNoise to serve compressed and cached static files in production
if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
    # Additional WhiteNoise settings if needed, for example to not bundle certain files:
    # WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif', '.zip']

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
