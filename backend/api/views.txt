# backend/api/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Article, PatientStory
from .serializers import ArticleSerializer, PatientStorySerializer
import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from datetime import datetime
from firebase_admin import firestore
from rest_framework.decorators import api_view
from rest_framework.pagination import PageNumberPagination
from rest_framework.permissions import IsAuthenticated
from rest_framework.decorators import api_view, permission_classes
from utils.firestore import add_document


db = firestore.client()  # Firestore database connection


class ArticleDetailView(APIView):
    def get(self, request, pk, format=None):
        try:
            article = Article.objects.get(id=pk)
            serializer = ArticleSerializer(article)
            return Response(serializer.data)
        except Article.DoesNotExist:
            return Response(
                {"error": "Article not found"}, status=status.HTTP_404_NOT_FOUND
            )


class PatientStoryDetailView(APIView):
    def get(self, request, pk, format=None):
        try:
            patient_story = PatientStory.objects.get(id=pk)
            serializer = PatientStorySerializer(patient_story)
            return Response(serializer.data)
        except PatientStory.DoesNotExist:
            return Response(
                {"error": "Patient Story not found"}, status=status.HTTP_404_NOT_FOUND
            )


@api_view(["POST"])
def submit_content(request):
    """
    Handles submission of articles by doctors and patient stories by patients.
    """
    try:
        user_email = request.data.get("email")
        title = request.data.get("title")
        content = request.data.get("content")
        tags = request.data.get("tags", [])

        if not user_email or not title or not content:
            return Response({"error": "Missing required fields."}, status=400)

        # Check if user is logged in
        user_doc = db.collection("logged_in_users").document(user_email).get()
        if not user_doc.exists:
            return Response({"error": "User not logged in."}, status=403)

        user_data = user_doc.to_dict()
        author_name = user_data.get("name", "Unknown Author")

        # Check if the user is a doctor
        doctor_doc = db.collection("doctors").document(user_email).get()
        if doctor_doc.exists:
            collection = "articles"
            message = "Article submitted successfully."
        else:
            # Check if the user is a patient
            patient_doc = db.collection("patients").document(user_email).get()
            if patient_doc.exists:
                collection = "patient_stories"
                message = "Patient story submitted successfully."
            else:
                return Response(
                    {"error": "User is neither a doctor nor a patient."}, status=403
                )

        # Prepare document data
        content_data = {
            "title": title,
            "content": content,
            "tags": tags,
            "author_name": author_name,
            "author_email": user_email,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
        }

        # Store in Firestore
        db.collection(collection).document().set(content_data)

        return Response({"message": message, "collection": collection}, status=201)

    except Exception as e:
        return Response({"error": str(e)}, status=500)


class CustomPagination(PageNumberPagination):
    page_size = 10
    page_size_query_param = "page_size"
    max_page_size = 50


@api_view(["GET"])
def get_articles(request):
    """Retrieve paginated articles, with optional filtering by tag."""
    tag = request.GET.get("tag", None)

    articles_ref = db.collection("articles").order_by(
        "date_time", direction=firestore.Query.DESCENDING
    )

    if tag:
        articles_ref = articles_ref.where("selectedTags", "array_contains", tag)

    docs = articles_ref.stream()
    articles = []

    for doc in docs:
        article_data = doc.to_dict()
        article_data["id"] = doc.id
        articles.append(article_data)

    paginator = CustomPagination()
    result_page = paginator.paginate_queryset(articles, request)

    return Response(
        {
            "results": result_page,
            "total_pages": paginator.page.paginator.num_pages,
            "current_page": paginator.page.number,
        }
    )


@api_view(["GET"])
def get_patient_stories(request):
    """Retrieve paginated patient stories, with optional filtering by tag."""
    tag = request.GET.get("tag", None)

    stories_ref = db.collection("patient_stories").order_by(
        "date_time", direction=firestore.Query.DESCENDING
    )

    if tag:
        stories_ref = stories_ref.where("selectedTags", "array_contains", tag)

    docs = stories_ref.stream()
    stories = []

    for doc in docs:
        story_data = doc.to_dict()
        story_data["id"] = doc.id
        stories.append(story_data)

    paginator = CustomPagination()
    result_page = paginator.paginate_queryset(stories, request)

    return Response(
        {
            "results": result_page,
            "total_pages": paginator.page.paginator.num_pages,
            "current_page": paginator.page.number,
        }
    )


@api_view(["GET"])
def get_article(request, article_id):
    """Retrieve a single article by ID."""
    article_ref = db.collection("articles").document(article_id)
    article = article_ref.get()

    if article.exists:
        return Response(article.to_dict())
    return Response({"error": "Article not found"}, status=404)


@api_view(["GET"])
def get_patient_story(request, story_id):
    """Retrieve a single patient story by ID."""
    story_ref = db.collection("patient_stories").document(story_id)
    story = story_ref.get()

    if story.exists:
        return Response(story.to_dict())
    return Response({"error": "Story not found"}, status=404)


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def create_article(request):
    """Create a new article (Authenticated users only)."""
    data = request.data
    new_article_ref = db.collection("articles").document()

    article_data = {
        "title": data.get("title"),
        "content": data.get("content"),
        "author_name": request.user.username,  # Get from authenticated user
        "date_time": firestore.SERVER_TIMESTAMP,
        "tags": data.get("tags", []),
    }

    new_article_ref.set(article_data)
    return Response(
        {"message": "Article created successfully", "id": new_article_ref.id}
    )


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def create_patient_story(request):
    """Create a new patient story (Authenticated users only)."""
    data = request.data
    new_story_ref = db.collection("patient_stories").document()

    story_data = {
        "title": data.get("title"),
        "content": data.get("content"),
        "author_name": request.user.username,  # Get from authenticated user
        "date_time": firestore.SERVER_TIMESTAMP,
        "tags": data.get("tags", []),
    }

    new_story_ref.set(story_data)
    return Response({"message": "Story created successfully", "id": new_story_ref.id})


@api_view(["PUT"])
@permission_classes([IsAuthenticated])
def update_article(request, article_id):
    """Update an article (only by the author)."""
    article_ref = db.collection("articles").document(article_id)
    article = article_ref.get()

    if not article.exists:
        return Response({"error": "Article not found"}, status=404)

    article_data = article.to_dict()

    if article_data["author_name"] != request.user.username:
        return Response({"error": "You are not the author of this article"}, status=403)

    updated_data = request.data
    article_ref.update(updated_data)

    return Response({"message": "Article updated successfully"})


@api_view(["PUT"])
@permission_classes([IsAuthenticated])
def update_patient_story(request, story_id):
    """Update a patient story (only by the author)."""
    story_ref = db.collection("patient_stories").document(story_id)
    story = story_ref.get()

    if not story.exists:
        return Response({"error": "Story not found"}, status=404)

    story_data = story.to_dict()

    if story_data["author_name"] != request.user.username:
        return Response({"error": "You are not the author of this story"}, status=403)

    updated_data = request.data
    story_ref.update(updated_data)

    return Response({"message": "Story updated successfully"})


@api_view(["DELETE"])
@permission_classes([IsAuthenticated])
def delete_article(request, article_id):
    """Delete an article (only by the author)."""
    article_ref = db.collection("articles").document(article_id)
    article = article_ref.get()

    if not article.exists:
        return Response({"error": "Article not found"}, status=404)

    article_data = article.to_dict()

    if article_data["author_name"] != request.user.username:
        return Response({"error": "You are not the author of this article"}, status=403)

    article_ref.delete()
    return Response({"message": "Article deleted successfully"})


@api_view(["DELETE"])
@permission_classes([IsAuthenticated])
def delete_patient_story(request, story_id):
    """Delete a patient story (only by the author)."""
    story_ref = db.collection("patient_stories").document(story_id)
    story = story_ref.get()

    if not story.exists:
        return Response({"error": "Story not found"}, status=404)

    story_data = story.to_dict()

    if story_data["author_name"] != request.user.username:
        return Response({"error": "You are not the author of this story"}, status=403)

    story_ref.delete()
    return Response({"message": "Story deleted successfully"})





urls.py

# urls.py
from django.urls import path
from .views import (
    get_articles,
    get_patient_stories,
    get_article,
    get_patient_story,
    create_article,
    create_patient_story,
    update_article,
    update_patient_story,
    delete_article,
    delete_patient_story,
)

urlpatterns = [
    # List views with pagination and optional tag filtering
    path("articles/", get_articles, name="get-articles"),
    path("patient-stories/", get_patient_stories, name="get-patient-stories"),
    # Detail views
    path("articles/<str:article_id>/", get_article, name="get-article"),
    path("stories/<str:story_id>/", get_patient_story, name="get-patient-story"),
    # Create new content (authenticated users only)
    path("articles/create/", create_article, name="create-article"),
    path("stories/create/", create_patient_story, name="create-patient-story"),
    # Update content (author only)
    path("articles/<str:article_id>/update/", update_article, name="update-article"),
    path(
        "stories/<str:story_id>/update/",
        update_patient_story,
        name="update-patient-story",
    ),
    # Delete content (author only)
    path("articles/<str:article_id>/delete/", delete_article, name="delete-article"),
    path(
        "stories/<str:story_id>/delete/",
        delete_patient_story,
        name="delete-patient-story",
    ),
]
